✅ Step 1: Project layout and routing using React + React-Bootstrap
✅ Step 2: Sidebar navigation
✅ Step 3: Home, Notes, and Settings pages
✅ Step 4: Basic custom styling

🔧 What We’re Building in Step 5
We'll build this in order:

NoteList component → Displays existing notes
NoteEditor component → Used to create or edit a note
Hook up localStorage logic (load/save notes)
Add functionality: Create, Edit, Delete notes
Style everything to look clean using React-Bootstrap

🧱 Step 5.1 — NoteList Component (Display Notes)

💡 Explanation
notes: Array of note objects
onEdit(note): Triggers when user clicks "Edit"
onDelete(id): Triggers when user clicks "Delete"
Using Bootstrap Card for styling each note
Truncates long content to 100 characters

📦 Step 5.2 — Store Notes in localStorage (temporarily)
Let’s add a useNotes() hook that loads and saves notes in localStorage.

💡 Explanation
Loads saved notes from localStorage once when the app starts.
Updates localStorage every time notes changes.
Returns [notes, setNotes] just like useState().

🛠️ Step 5.3 — Use NoteList in Notes.jsx
Now let's plug everything in.
📄 pages/Notes.jsx

💡 Explanation
The NoteEditor appears when creating or editing a note.
handleSave: saves the note (new or updated).
handleDelete: removes a note.
editingNote controls whether we’re in editing mode or not.

📝 Step 5.4 — NoteEditor Component (Create/Edit Form)
📄 components/NoteEditor.jsx

💡 Explanation
Controlled input for title and content.
Calls onSave() with updated note when submitted.
Calls onCancel() to hide the editor.

✅ Step 5 COMPLETE: Summary
You now have a fully working note system with:

📄 A clean interface to create, edit, and delete notes
💾 Data persistence using localStorage
✅ React-Bootstrap styling


✅ Step 6 — Tagging System: Add, Display & Filter by Tags
Your Second Brain app should let users:

Add tags to notes (e.g. #python, #idea)
See tags under each note
Filter notes by clicking on a tag

🧱 Step 6.1 — Update Note Schema to Include Tags
We’ll now update every note to optionally include an array of tags like:
{
  id: 1699982934,
  title: "React Notes",
  content: "JSX stands for JavaScript XML",
  tags: ["react", "javascript"]
}

🔧 Modify NoteEditor to Support Tags
Let’s allow users to type comma-separated tags.

💡 Explanation:
tags are entered as a comma-separated string.
On submit, they are cleaned and stored as an array.
This makes the note structure consistent for filtering later.

🧱 Step 6.2 — Show Tags in NoteList
We now display tags under each note card.

🧱 Step 6.3 — Filter Notes by Tag
Now we add the logic to filter notes when a tag is clicked.
We’ll do it in Notes.jsx.

✅ Step 6 COMPLETE — What You Built
🏷️ Add tags to notes
🎯 View tags as clickable badges
🔍 Instantly filter notes by tag
✅ Revert back to all notes


✅ Step 8 — Real OpenAI Integration (Summarize + Suggest Title)
🔧 What We’ll Do:
Set up OpenAI API key

Connect to OpenAI using fetch (frontend-only for now)
Replace fake AI logic with real summarization + title generation
Handle errors and rate limits gracefully


